scikit-learn contains a function that shuffles the dataset and splits it for you: the
**train_test_split function. This function extracts 75% of the rows in the data as the
training set, together with the corresponding labels for this data. The remaining 25%
of the data, together with the remaining labels, is declared as the test set.

his is inspired by the standard formulation f(x)=y in mathematics,
where x is the input to a function and y is the output. Following more conventions
from mathematics, we use a capital X because the data is a two-dimensional array (a
matrix) and a lowercase y because the target is a one-dimensional array (a vector).

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
iris_dataset['data'], iris_dataset['target'], random_state=0)


#You used plotly to visualize the data 

#now we use knn to model the data

from sklearn.neighbors import KNeighborsClassifier---> only stores the training data
knn = KNeighborsClassifier(n_neighbors=1)    #knn encapsulates the algorithm and info algorithm extracts from training data.


knn.fit(X_train, y_train) ---> To build the model on the training set, we call the fit method of the knn object,
which takes as arguments the NumPy array X_train containing the training data and
the NumPy array y_train of the corresponding training labels



